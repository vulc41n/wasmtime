;;;; Instruction definition ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Note: in the instructions below, we order destination Registers first and
;; then source Registers afterwards.
(type MInst
  (enum

    ;;;; Actual Instructions ;;;;

    ;; Unreachable (unconditional trap)
    (Unreachable)


    ;; Nothing.
    (Nop)


    ;; Return.
    (Ret)

    ;; Integer arithmetic.
    (eqz32 (dst Value) (src Value))
    ;; (eq32 (dst WritableXReg) (src1 XReg) (src2 XReg))
    ;; (neq32 (dst WritableXReg) (src1 XReg) (src2 XReg))
    ;; (slt32 (dst WritableXReg) (src1 XReg) (src2 XReg))
    ;; (ult32 (dst WritableXReg) (src1 XReg) (src2 XReg))
    ;; (sgt32 (dst WritableXReg) (src1 XReg) (src2 XReg))
    ;; (ugt32 (dst WritableXReg) (src1 XReg) (src2 XReg))
    ;; (sle32 (dst WritableXReg) (src1 XReg) (src2 XReg))
    ;; (ule32 (dst WritableXReg) (src1 XReg) (src2 XReg))
    ;; (sge32 (dst WritableXReg) (src1 XReg) (src2 XReg))
    ;; (uge32 (dst WritableXReg) (src1 XReg) (src2 XReg))
    ;; (clz32 (dst WritableXReg) (src XReg))
    ;; (ctz32 (dst WritableXReg) (src XReg))
    ;; (popcnt32 (dst WritableXReg) (src XReg))
    ;; (add32 (dst WritableXReg) (src1 XReg) (src2 XReg))
    ;; (sub32 (dst WritableXReg) (src1 XReg) (src2 XReg))
    ;; (mul32 (dst WritableXReg) (src1 XReg) (src2 XReg))
    ;; (sdiv32 (dst WritableXReg) (src1 XReg) (src2 XReg))
    ;; (udiv32 (dst WritableXReg) (src1 XReg) (src2 XReg))
    ;; (srem32 (dst WritableXReg) (src1 XReg) (src2 XReg))
    ;; (urem32 (dst WritableXReg) (src1 XReg) (src2 XReg))
    ;; (and32 (dst WritableXReg) (src1 XReg) (src2 XReg))
    ;; (or32 (dst WritableXReg) (src1 XReg) (src2 XReg))
    ;; (xor32 (dst WritableXReg) (src1 XReg) (src2 XReg))
    ;; (shl32 (dst WritableXReg) (src1 XReg) (src2 XReg))
    ;; (sshr32 (dst WritableXReg) (src1 XReg) (src2 XReg))
    ;; (ushr32 (dst WritableXReg) (src1 XReg) (src2 XReg))
    ;; (rotl32 (dst WritableXReg) (src1 XReg) (src2 XReg))
    ;; (rotr32 (dst WritableXReg) (src1 XReg) (src2 XReg))

    ;; (eqz64 (dst WritableXReg) (src XReg))
    ;; (eq64 (dst WritableXReg) (src1 XReg) (src2 XReg))
    ;; (neq64 (dst WritableXReg) (src1 XReg) (src2 XReg))
    ;; (slt64 (dst WritableXReg) (src1 XReg) (src2 XReg))
    ;; (ult64 (dst WritableXReg) (src1 XReg) (src2 XReg))
    ;; (sgt64 (dst WritableXReg) (src1 XReg) (src2 XReg))
    ;; (ugt64 (dst WritableXReg) (src1 XReg) (src2 XReg))
    ;; (sle64 (dst WritableXReg) (src1 XReg) (src2 XReg))
    ;; (ule64 (dst WritableXReg) (src1 XReg) (src2 XReg))
    ;; (sge64 (dst WritableXReg) (src1 XReg) (src2 XReg))
    ;; (uge64 (dst WritableXReg) (src1 XReg) (src2 XReg))
    ;; (clz64 (dst WritableXReg) (src XReg))
    ;; (ctz64 (dst WritableXReg) (src XReg))
    ;; (popcnt64 (dst WritableXReg) (src XReg))
    ;; (add64 (dst WritableXReg) (src1 XReg) (src2 XReg))
    ;; (sub64 (dst WritableXReg) (src1 XReg) (src2 XReg))
    ;; (mul64 (dst WritableXReg) (src1 XReg) (src2 XReg))
    ;; (sdiv64 (dst WritableXReg) (src1 XReg) (src2 XReg))
    ;; (udiv64 (dst WritableXReg) (src1 XReg) (src2 XReg))
    ;; (srem64 (dst WritableXReg) (src1 XReg) (src2 XReg))
    ;; (urem64 (dst WritableXReg) (src1 XReg) (src2 XReg))
    ;; (and64 (dst WritableXReg) (src1 XReg) (src2 XReg))
    ;; (or64 (dst WritableXReg) (src1 XReg) (src2 XReg))
    ;; (xor64 (dst WritableXReg) (src1 XReg) (src2 XReg))
    ;; (shl64 (dst WritableXReg) (src1 XReg) (src2 XReg))
    ;; (sshr64 (dst WritableXReg) (src1 XReg) (src2 XReg))
    ;; (ushr64 (dst WritableXReg) (src1 XReg) (src2 XReg))
    ;; (rotl64 (dst WritableXReg) (src1 XReg) (src2 XReg))
    ;; (rotr64 (dst WritableXReg) (src1 XReg) (src2 XReg))


    ;; Floating point arithmetic.
    ;; (eqf32 (dst WritableFReg) (src1 FReg) (src2 FReg))
    ;; (neqf32 (dst WritableFReg) (src1 FReg) (src2 FReg))
    ;; (ltf32 (dst WritableFReg) (src1 FReg) (src2 FReg))
    ;; (gtf32 (dst WritableFReg) (src1 FReg) (src2 FReg))
    ;; (lef32 (dst WritableFReg) (src1 FReg) (src2 FReg))
    ;; (gef32 (dst WritableFReg) (src1 FReg) (src2 FReg))
    ;; (absf32 (dst WritableFReg) (src FReg))
    ;; (negf32 (dst WritableFReg) (src FReg))
    ;; (ceilf32 (dst WritableFReg) (src FReg))
    ;; (floorf32 (dst WritableFReg) (src FReg))
    ;; (truncf32 (dst WritableFReg) (src FReg))
    ;; (nearestf32 (dst WritableFReg) (src FReg))
    ;; (sqrtf32 (dst WritableFReg) (src FReg))
    ;; (addf32 (dst WritableFReg) (src1 FReg) (src2 FReg))
    ;; (subf32 (dst WritableFReg) (src1 FReg) (src2 FReg))
    ;; (mulf32 (dst WritableFReg) (src1 FReg) (src2 FReg))
    ;; (divf32 (dst WritableFReg) (src1 FReg) (src2 FReg))
    ;; (minf32 (dst WritableFReg) (src1 FReg) (src2 FReg))
    ;; (maxf32 (dst WritableFReg) (src1 FReg) (src2 FReg))
    ;; (copysignf32 (dst WritableFReg) (src1 FReg) (src2 FReg))

    ;; (eqf64 (dst WritableFReg) (src1 FReg) (src2 FReg))
    ;; (neqf64 (dst WritableFReg) (src1 FReg) (src2 FReg))
    ;; (ltf64 (dst WritableFReg) (src1 FReg) (src2 FReg))
    ;; (gtf64 (dst WritableFReg) (src1 FReg) (src2 FReg))
    ;; (lef64 (dst WritableFReg) (src1 FReg) (src2 FReg))
    ;; (gef64 (dst WritableFReg) (src1 FReg) (src2 FReg))
    ;; (absf64 (dst WritableFReg) (src FReg))
    ;; (negf64 (dst WritableFReg) (src FReg))
    ;; (ceilf64 (dst WritableFReg) (src FReg))
    ;; (floorf64 (dst WritableFReg) (src FReg))
    ;; (truncf64 (dst WritableFReg) (src FReg))
    ;; (nearestf64 (dst WritableFReg) (src FReg))
    ;; (sqrtf64 (dst WritableFReg) (src FReg))
    ;; (addf64 (dst WritableFReg) (src1 FReg) (src2 FReg))
    ;; (subf64 (dst WritableFReg) (src1 FReg) (src2 FReg))
    ;; (mulf64 (dst WritableFReg) (src1 FReg) (src2 FReg))
    ;; (divf64 (dst WritableFReg) (src1 FReg) (src2 FReg))
    ;; (minf64 (dst WritableFReg) (src1 FReg) (src2 FReg))
    ;; (maxf64 (dst WritableFReg) (src1 FReg) (src2 FReg))
    ;; (copysignf64 (dst WritableFReg) (src1 FReg) (src2 FReg))
  )
)

;;;; Newtypes for Different Register Classes ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (type XReg (primitive XReg))
;; (type WritableXReg (primitive WritableXReg))
;; 
;; (type FReg (primitive FReg))
;; (type WritableFReg (primitive WritableFReg))
;; 
;; (type VReg (primitive VReg))
;; (type WritableVReg (primitive WritableVReg))
;; 
;; Allocates a new  writable regs.
;; (decl temp_writable_xreg () WritableXReg)
;; (rule (temp_writable_xreg) (temp_writable_reg $I64))
;; 
;; (decl temp_writable_freg () WritableFReg)
;; (rule (temp_writable_freg) (temp_writable_reg $F64))
;; 
;; (decl temp_writable_vreg () WritableVReg)
;; (rule (temp_writable_vreg) (temp_writable_reg $I8X16))
;; 
;; arithmetic operations
;; 
;; (decl wasm_eqz32 (XReg) XReg)
;; (rule (wasm_eqz32 a)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.eqz32 dst a))))
;;         dst))
;; 
;; (decl wasm_eq32 (XReg XReg) XReg)
;; (rule (wasm_eq32 a b)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.eq32 dst a b))))
;;         dst))
;; 
;; (decl wasm_neq32 (XReg XReg) XReg)
;; (rule (wasm_neq32 a b)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.neq32 dst a b))))
;;         dst))
;; 
;; (decl wasm_slt32 (XReg XReg) XReg)
;; (rule (wasm_slt32 a b)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.slt32 dst a b))))
;;         dst))
;; 
;; (decl wasm_ult32 (XReg XReg) XReg)
;; (rule (wasm_ult32 a b)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.ult32 dst a b))))
;;         dst))
;; 
;; (decl wasm_sgt32 (XReg XReg) XReg)
;; (rule (wasm_sgt32 a b)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.sgt32 dst a b))))
;;         dst))
;; 
;; (decl wasm_ugt32 (XReg XReg) XReg)
;; (rule (wasm_ugt32 a b)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.ugt32 dst a b))))
;;         dst))
;; 
;; (decl wasm_sle32 (XReg XReg) XReg)
;; (rule (wasm_sle32 a b)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.sle32 dst a b))))
;;         dst))
;; 
;; (decl wasm_ule32 (XReg XReg) XReg)
;; (rule (wasm_ule32 a b)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.ule32 dst a b))))
;;         dst))
;; 
;; (decl wasm_sge32 (XReg XReg) XReg)
;; (rule (wasm_sge32 a b)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.sge32 dst a b))))
;;         dst))
;; 
;; (decl wasm_uge32 (XReg XReg) XReg)
;; (rule (wasm_uge32 a b)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.uge32 dst a b))))
;;         dst))
;; 
;; (decl wasm_clz32 (XReg) XReg)
;; (rule (wasm_clz32 a)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.clz32 dst a))))
;;         dst))
;; 
;; (decl wasm_ctz32 (XReg) XReg)
;; (rule (wasm_ctz32 a)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.ctz32 dst a))))
;;         dst))
;; 
;; (decl wasm_popcnt32 (XReg) XReg)
;; (rule (wasm_popcnt32 a)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.popcnt32 dst a))))
;;         dst))
;; 
;; (decl wasm_add32 (XReg XReg) XReg)
;; (rule (wasm_add32 a b)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.add32 dst a b))))
;;         dst))
;; 
;; (decl wasm_sub32 (XReg XReg) XReg)
;; (rule (wasm_sub32 a b)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.sub32 dst a b))))
;;         dst))
;; 
;; (decl wasm_mul32 (XReg XReg) XReg)
;; (rule (wasm_mul32 a b)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.mul32 dst a b))))
;;         dst))
;; 
;; (decl wasm_sdiv32 (XReg XReg) XReg)
;; (rule (wasm_sdiv32 a b)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.sdiv32 dst a b))))
;;         dst))
;; 
;; (decl wasm_udiv32 (XReg XReg) XReg)
;; (rule (wasm_udiv32 a b)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.udiv32 dst a b))))
;;         dst))
;; 
;; (decl wasm_srem32 (XReg XReg) XReg)
;; (rule (wasm_srem32 a b)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.srem32 dst a b))))
;;         dst))
;; 
;; (decl wasm_urem32 (XReg XReg) XReg)
;; (rule (wasm_urem32 a b)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.urem32 dst a b))))
;;         dst))
;; 
;; (decl wasm_and32 (XReg XReg) XReg)
;; (rule (wasm_and32 a b)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.and32 dst a b))))
;;         dst))
;; 
;; (decl wasm_or32 (XReg XReg) XReg)
;; (rule (wasm_or32 a b)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.or32 dst a b))))
;;         dst))
;; 
;; (decl wasm_xor32 (XReg XReg) XReg)
;; (rule (wasm_xor32 a b)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.xor32 dst a b))))
;;         dst))
;; 
;; (decl wasm_shl32 (XReg XReg) XReg)
;; (rule (wasm_shl32 a b)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.shl32 dst a b))))
;;         dst))
;; 
;; (decl wasm_sshr32 (XReg XReg) XReg)
;; (rule (wasm_sshr32 a b)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.sshr32 dst a b))))
;;         dst))
;; 
;; (decl wasm_ushr32 (XReg XReg) XReg)
;; (rule (wasm_ushr32 a b)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.ushr32 dst a b))))
;;         dst))
;; 
;; (decl wasm_rotl32 (XReg XReg) XReg)
;; (rule (wasm_rotl32 a b)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.rotl32 dst a b))))
;;         dst))
;; 
;; (decl wasm_rotr32 (XReg XReg) XReg)
;; (rule (wasm_rotr32 a b)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.rotr32 dst a b))))
;;         dst))
;; 
;; (decl wasm_eqz64 (XReg) XReg)
;; (rule (wasm_eqz64 a)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.eqz64 dst a))))
;;         dst))
;; 
;; (decl wasm_eq64 (XReg XReg) XReg)
;; (rule (wasm_eq64 a b)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.eq64 dst a b))))
;;         dst))
;; 
;; (decl wasm_neq64 (XReg XReg) XReg)
;; (rule (wasm_neq64 a b)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.neq64 dst a b))))
;;         dst))
;; 
;; (decl wasm_slt64 (XReg XReg) XReg)
;; (rule (wasm_slt64 a b)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.slt64 dst a b))))
;;         dst))
;; 
;; (decl wasm_ult64 (XReg XReg) XReg)
;; (rule (wasm_ult64 a b)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.ult64 dst a b))))
;;         dst))
;; 
;; (decl wasm_sgt64 (XReg XReg) XReg)
;; (rule (wasm_sgt64 a b)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.sgt64 dst a b))))
;;         dst))
;; 
;; (decl wasm_ugt64 (XReg XReg) XReg)
;; (rule (wasm_ugt64 a b)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.ugt64 dst a b))))
;;         dst))
;; 
;; (decl wasm_sle64 (XReg XReg) XReg)
;; (rule (wasm_sle64 a b)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.sle64 dst a b))))
;;         dst))
;; 
;; (decl wasm_ule64 (XReg XReg) XReg)
;; (rule (wasm_ule64 a b)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.ule64 dst a b))))
;;         dst))
;; 
;; (decl wasm_sge64 (XReg XReg) XReg)
;; (rule (wasm_sge64 a b)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.sge64 dst a b))))
;;         dst))
;; 
;; (decl wasm_uge64 (XReg XReg) XReg)
;; (rule (wasm_uge64 a b)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.uge64 dst a b))))
;;         dst))
;; 
;; (decl wasm_clz64 (XReg) XReg)
;; (rule (wasm_clz64 a)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.clz64 dst a))))
;;         dst))
;; 
;; (decl wasm_ctz64 (XReg) XReg)
;; (rule (wasm_ctz64 a)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.ctz64 dst a))))
;;         dst))
;; 
;; (decl wasm_popcnt64 (XReg) XReg)
;; (rule (wasm_popcnt64 a)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.popcnt64 dst a))))
;;         dst))
;; 
;; (decl wasm_add64 (XReg XReg) XReg)
;; (rule (wasm_add64 a b)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.add64 dst a b))))
;;         dst))
;; 
;; (decl wasm_sub64 (XReg XReg) XReg)
;; (rule (wasm_sub64 a b)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.sub64 dst a b))))
;;         dst))
;; 
;; (decl wasm_mul64 (XReg XReg) XReg)
;; (rule (wasm_mul64 a b)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.mul64 dst a b))))
;;         dst))
;; 
;; (decl wasm_sdiv64 (XReg XReg) XReg)
;; (rule (wasm_sdiv64 a b)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.sdiv64 dst a b))))
;;         dst))
;; 
;; (decl wasm_udiv64 (XReg XReg) XReg)
;; (rule (wasm_udiv64 a b)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.udiv64 dst a b))))
;;         dst))
;; 
;; (decl wasm_srem64 (XReg XReg) XReg)
;; (rule (wasm_srem64 a b)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.srem64 dst a b))))
;;         dst))
;; 
;; (decl wasm_urem64 (XReg XReg) XReg)
;; (rule (wasm_urem64 a b)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.urem64 dst a b))))
;;         dst))
;; 
;; (decl wasm_and64 (XReg XReg) XReg)
;; (rule (wasm_and64 a b)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.and64 dst a b))))
;;         dst))
;; 
;; (decl wasm_or64 (XReg XReg) XReg)
;; (rule (wasm_or64 a b)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.or64 dst a b))))
;;         dst))
;; 
;; (decl wasm_xor64 (XReg XReg) XReg)
;; (rule (wasm_xor64 a b)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.xor64 dst a b))))
;;         dst))
;; 
;; (decl wasm_shl64 (XReg XReg) XReg)
;; (rule (wasm_shl64 a b)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.shl64 dst a b))))
;;         dst))
;; 
;; (decl wasm_sshr64 (XReg XReg) XReg)
;; (rule (wasm_sshr64 a b)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.sshr64 dst a b))))
;;         dst))
;; 
;; (decl wasm_ushr64 (XReg XReg) XReg)
;; (rule (wasm_ushr64 a b)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.ushr64 dst a b))))
;;         dst))
;; 
;; (decl wasm_rotl64 (XReg XReg) XReg)
;; (rule (wasm_rotl64 a b)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.rotl64 dst a b))))
;;         dst))
;; 
;; (decl wasm_rotr64 (XReg XReg) XReg)
;; (rule (wasm_rotr64 a b)
;;       (let ((dst WritableXReg (temp_writable_xreg))
;;             (_ Unit (emit (MInst.rotr64 dst a b))))
;;         dst))
;; 
;; (decl wasm_eqf32 (FReg FReg) FReg)
;; (rule (wasm_eqf32 a b)
;;       (let ((dst WritableFReg (temp_writable_freg))
;;             (_ Unit (emit (MInst.eqf32 dst a b))))
;;         dst))
;; 
;; (decl wasm_neqf32 (FReg FReg) FReg)
;; (rule (wasm_neqf32 a b)
;;       (let ((dst WritableFReg (temp_writable_freg))
;;             (_ Unit (emit (MInst.neqf32 dst a b))))
;;         dst))
;; 
;; (decl wasm_ltf32 (FReg FReg) FReg)
;; (rule (wasm_ltf32 a b)
;;       (let ((dst WritableFReg (temp_writable_freg))
;;             (_ Unit (emit (MInst.ltf32 dst a b))))
;;         dst))
;; 
;; (decl wasm_gtf32 (FReg FReg) FReg)
;; (rule (wasm_gtf32 a b)
;;       (let ((dst WritableFReg (temp_writable_freg))
;;             (_ Unit (emit (MInst.gtf32 dst a b))))
;;         dst))
;; 
;; (decl wasm_lef32 (FReg FReg) FReg)
;; (rule (wasm_lef32 a b)
;;       (let ((dst WritableFReg (temp_writable_freg))
;;             (_ Unit (emit (MInst.lef32 dst a b))))
;;         dst))
;; 
;; (decl wasm_gef32 (FReg FReg) FReg)
;; (rule (wasm_gef32 a b)
;;       (let ((dst WritableFReg (temp_writable_freg))
;;             (_ Unit (emit (MInst.gef32 dst a b))))
;;         dst))
;; 
;; (decl wasm_absf32 (FReg) FReg)
;; (rule (wasm_absf32 a)
;;       (let ((dst WritableFReg (temp_writable_freg))
;;             (_ Unit (emit (MInst.absf32 dst a))))
;;         dst))
;; 
;; (decl wasm_negf32 (FReg) FReg)
;; (rule (wasm_negf32 a)
;;       (let ((dst WritableFReg (temp_writable_freg))
;;             (_ Unit (emit (MInst.negf32 dst a))))
;;         dst))
;; 
;; (decl wasm_ceilf32 (FReg) FReg)
;; (rule (wasm_ceilf32 a)
;;       (let ((dst WritableFReg (temp_writable_freg))
;;             (_ Unit (emit (MInst.ceilf32 dst a))))
;;         dst))
;; 
;; (decl wasm_floorf32 (FReg) FReg)
;; (rule (wasm_floorf32 a)
;;       (let ((dst WritableFReg (temp_writable_freg))
;;             (_ Unit (emit (MInst.floorf32 dst a))))
;;         dst))
;; 
;; (decl wasm_truncf32 (FReg) FReg)
;; (rule (wasm_truncf32 a)
;;       (let ((dst WritableFReg (temp_writable_freg))
;;             (_ Unit (emit (MInst.truncf32 dst a))))
;;         dst))
;; 
;; (decl wasm_nearestf32 (FReg) FReg)
;; (rule (wasm_nearestf32 a)
;;       (let ((dst WritableFReg (temp_writable_freg))
;;             (_ Unit (emit (MInst.nearestf32 dst a))))
;;         dst))
;; 
;; (decl wasm_sqrtf32 (FReg) FReg)
;; (rule (wasm_sqrtf32 a)
;;       (let ((dst WritableFReg (temp_writable_freg))
;;             (_ Unit (emit (MInst.sqrtf32 dst a))))
;;         dst))
;; 
;; (decl wasm_addf32 (FReg FReg) FReg)
;; (rule (wasm_addf32 a b)
;;       (let ((dst WritableFReg (temp_writable_freg))
;;             (_ Unit (emit (MInst.addf32 dst a b))))
;;         dst))
;; 
;; (decl wasm_subf32 (FReg FReg) FReg)
;; (rule (wasm_subf32 a b)
;;       (let ((dst WritableFReg (temp_writable_freg))
;;             (_ Unit (emit (MInst.subf32 dst a b))))
;;         dst))
;; 
;; (decl wasm_mulf32 (FReg FReg) FReg)
;; (rule (wasm_mulf32 a b)
;;       (let ((dst WritableFReg (temp_writable_freg))
;;             (_ Unit (emit (MInst.mulf32 dst a b))))
;;         dst))
;; 
;; (decl wasm_divf32 (FReg FReg) FReg)
;; (rule (wasm_divf32 a b)
;;       (let ((dst WritableFReg (temp_writable_freg))
;;             (_ Unit (emit (MInst.divf32 dst a b))))
;;         dst))
;; 
;; (decl wasm_minf32 (FReg FReg) FReg)
;; (rule (wasm_minf32 a b)
;;       (let ((dst WritableFReg (temp_writable_freg))
;;             (_ Unit (emit (MInst.minf32 dst a b))))
;;         dst))
;; 
;; (decl wasm_maxf32 (FReg FReg) FReg)
;; (rule (wasm_maxf32 a b)
;;       (let ((dst WritableFReg (temp_writable_freg))
;;             (_ Unit (emit (MInst.maxf32 dst a b))))
;;         dst))
;; 
;; (decl wasm_copysignf32 (FReg FReg) FReg)
;; (rule (wasm_copysignf32 a b)
;;       (let ((dst WritableFReg (temp_writable_freg))
;;             (_ Unit (emit (MInst.copysignf32 dst a b))))
;;         dst))
;; 
;; 
;; (decl wasm_eqf64 (FReg FReg) FReg)
;; (rule (wasm_eqf64 a b)
;;       (let ((dst WritableFReg (temp_writable_freg))
;;             (_ Unit (emit (MInst.eqf64 dst a b))))
;;         dst))
;; 
;; (decl wasm_neqf64 (FReg FReg) FReg)
;; (rule (wasm_neqf64 a b)
;;       (let ((dst WritableFReg (temp_writable_freg))
;;             (_ Unit (emit (MInst.neqf64 dst a b))))
;;         dst))
;; 
;; (decl wasm_ltf64 (FReg FReg) FReg)
;; (rule (wasm_ltf64 a b)
;;       (let ((dst WritableFReg (temp_writable_freg))
;;             (_ Unit (emit (MInst.ltf64 dst a b))))
;;         dst))
;; 
;; (decl wasm_gtf64 (FReg FReg) FReg)
;; (rule (wasm_gtf64 a b)
;;       (let ((dst WritableFReg (temp_writable_freg))
;;             (_ Unit (emit (MInst.gtf64 dst a b))))
;;         dst))
;; 
;; (decl wasm_lef64 (FReg FReg) FReg)
;; (rule (wasm_lef64 a b)
;;       (let ((dst WritableFReg (temp_writable_freg))
;;             (_ Unit (emit (MInst.lef64 dst a b))))
;;         dst))
;; 
;; (decl wasm_gef64 (FReg FReg) FReg)
;; (rule (wasm_gef64 a b)
;;       (let ((dst WritableFReg (temp_writable_freg))
;;             (_ Unit (emit (MInst.gef64 dst a b))))
;;         dst))
;; 
;; (decl wasm_absf64 (FReg) FReg)
;; (rule (wasm_absf64 a)
;;       (let ((dst WritableFReg (temp_writable_freg))
;;             (_ Unit (emit (MInst.absf64 dst a))))
;;         dst))
;; 
;; (decl wasm_negf64 (FReg) FReg)
;; (rule (wasm_negf64 a)
;;       (let ((dst WritableFReg (temp_writable_freg))
;;             (_ Unit (emit (MInst.negf64 dst a))))
;;         dst))
;; 
;; (decl wasm_ceilf64 (FReg) FReg)
;; (rule (wasm_ceilf64 a)
;;       (let ((dst WritableFReg (temp_writable_freg))
;;             (_ Unit (emit (MInst.ceilf64 dst a))))
;;         dst))
;; 
;; (decl wasm_floorf64 (FReg) FReg)
;; (rule (wasm_floorf64 a)
;;       (let ((dst WritableFReg (temp_writable_freg))
;;             (_ Unit (emit (MInst.floorf64 dst a))))
;;         dst))
;; 
;; (decl wasm_truncf64 (FReg) FReg)
;; (rule (wasm_truncf64 a)
;;       (let ((dst WritableFReg (temp_writable_freg))
;;             (_ Unit (emit (MInst.truncf64 dst a))))
;;         dst))
;; 
;; (decl wasm_nearestf64 (FReg) FReg)
;; (rule (wasm_nearestf64 a)
;;       (let ((dst WritableFReg (temp_writable_freg))
;;             (_ Unit (emit (MInst.nearestf64 dst a))))
;;         dst))
;; 
;; (decl wasm_sqrtf64 (FReg) FReg)
;; (rule (wasm_sqrtf64 a)
;;       (let ((dst WritableFReg (temp_writable_freg))
;;             (_ Unit (emit (MInst.sqrtf64 dst a))))
;;         dst))
;; 
;; (decl wasm_addf64 (FReg FReg) FReg)
;; (rule (wasm_addf64 a b)
;;       (let ((dst WritableFReg (temp_writable_freg))
;;             (_ Unit (emit (MInst.addf64 dst a b))))
;;         dst))
;; 
;; (decl wasm_subf64 (FReg FReg) FReg)
;; (rule (wasm_subf64 a b)
;;       (let ((dst WritableFReg (temp_writable_freg))
;;             (_ Unit (emit (MInst.subf64 dst a b))))
;;         dst))
;; 
;; (decl wasm_mulf64 (FReg FReg) FReg)
;; (rule (wasm_mulf64 a b)
;;       (let ((dst WritableFReg (temp_writable_freg))
;;             (_ Unit (emit (MInst.mulf64 dst a b))))
;;         dst))
;; 
;; (decl wasm_divf64 (FReg FReg) FReg)
;; (rule (wasm_divf64 a b)
;;       (let ((dst WritableFReg (temp_writable_freg))
;;             (_ Unit (emit (MInst.divf64 dst a b))))
;;         dst))
;; 
;; (decl wasm_minf64 (FReg FReg) FReg)
;; (rule (wasm_minf64 a b)
;;       (let ((dst WritableFReg (temp_writable_freg))
;;             (_ Unit (emit (MInst.minf64 dst a b))))
;;         dst))
;; 
;; (decl wasm_maxf64 (FReg FReg) FReg)
;; (rule (wasm_maxf64 a b)
;;       (let ((dst WritableFReg (temp_writable_freg))
;;             (_ Unit (emit (MInst.maxf64 dst a b))))
;;         dst))
;; 
;; (decl wasm_copysignf64 (FReg FReg) FReg)
;; (rule (wasm_copysignf64 a b)
;;       (let ((dst WritableFReg (temp_writable_freg))
;;             (_ Unit (emit (MInst.copysignf64 dst a b))))
;;         dst))
